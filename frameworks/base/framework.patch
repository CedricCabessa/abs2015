diff --git a/Android.mk b/Android.mk
index 58dbc17..e872ae4 100644
--- a/Android.mk
+++ b/Android.mk
@@ -382,6 +382,7 @@ LOCAL_SRC_FILES += \
 	packages/services/PacProcessor/com/android/net/IProxyService.aidl \
 	packages/services/Proxy/com/android/net/IProxyCallback.aidl \
 	packages/services/Proxy/com/android/net/IProxyPortListener.aidl \
+	abs/java/android/abs/IAbsManager.aidl \
 
 # FRAMEWORKS_BASE_JAVA_SRC_DIRS comes from build/core/pathmap.mk
 LOCAL_AIDL_INCLUDES += $(FRAMEWORKS_BASE_JAVA_SRC_DIRS)
diff --git a/core/java/android/app/ContextImpl.java b/core/java/android/app/ContextImpl.java
index 082ba19..2e3d504 100644
--- a/core/java/android/app/ContextImpl.java
+++ b/core/java/android/app/ContextImpl.java
@@ -149,6 +149,9 @@ import com.android.internal.annotations.GuardedBy;
 import com.android.internal.app.IAppOpsService;
 import com.android.internal.os.IDropBoxManagerService;
 
+import android.abs.AbsManager;
+import android.abs.IAbsManager;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
@@ -770,6 +773,14 @@ class ContextImpl extends Context {
                 IBinder b = ServiceManager.getService(APPWIDGET_SERVICE);
                 return new AppWidgetManager(ctx, IAppWidgetService.Stub.asInterface(b));
             }});
+
+        registerService(ABS_SERVICE, new ServiceFetcher() {
+            public Object createService(ContextImpl ctx) {
+                IBinder b = ServiceManager.getService(ABS_SERVICE);
+                IAbsManager service = IAbsManager.Stub.asInterface(b);
+                return new AbsManager(service);
+            }});
+
     }
 
     static ContextImpl getImpl(Context context) {
diff --git a/core/java/android/content/Context.java b/core/java/android/content/Context.java
index c9b7d0a..c7f8b70 100644
--- a/core/java/android/content/Context.java
+++ b/core/java/android/content/Context.java
@@ -2902,6 +2902,8 @@ public abstract class Context {
      */
     public static final String MEDIA_PROJECTION_SERVICE = "media_projection";
 
+    public static final String ABS_SERVICE = "abs";
+
     /**
      * Determine whether the given permission is allowed for a particular
      * process and user ID running in the system.
diff --git a/core/res/AndroidManifest.xml b/core/res/AndroidManifest.xml
index f35b2e8..78e1e66 100644
--- a/core/res/AndroidManifest.xml
+++ b/core/res/AndroidManifest.xml
@@ -2851,6 +2851,12 @@
          confirmation UI for full backup/restore -->
     <uses-permission android:name="android.permission.CONFIRM_FULL_BACKUP"/>
 
+    <permission android:name="android.permission.ABS_ACCESS"
+        android:permissionGroup="android.permission-group.HARDWARE_CONTROLS"
+        android:protectionLevel="dangerous" />
+
+
+
     <application android:process="system"
                  android:persistent="true"
                  android:hasCode="false"
diff --git a/services/Android.mk b/services/Android.mk
index 3c94f43..69d309c 100644
--- a/services/Android.mk
+++ b/services/Android.mk
@@ -28,7 +28,8 @@ services := \
     restrictions \
     usage \
     usb \
-    voiceinteraction
+    voiceinteraction \
+    abs
 
 # The convention is to name each service module 'services.$(module_name)'
 LOCAL_STATIC_JAVA_LIBRARIES := $(addprefix services.,$(services))
diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java
index 198cc53..7aac9a1 100644
--- a/services/java/com/android/server/SystemServer.java
+++ b/services/java/com/android/server/SystemServer.java
@@ -98,6 +98,8 @@ import com.android.server.wallpaper.WallpaperManagerService;
 import com.android.server.webkit.WebViewUpdateService;
 import com.android.server.wm.WindowManagerService;
 
+import android.server.abs.AbsService;
+
 import dalvik.system.VMRuntime;
 
 import java.io.File;
@@ -409,6 +411,7 @@ public final class SystemServer {
         ConsumerIrService consumerIr = null;
         AudioService audioService = null;
         MmsServiceBroker mmsService = null;
+        AbsService absService = null;
 
         boolean disableStorage = SystemProperties.getBoolean("config.disable_storage", false);
         boolean disableMedia = SystemProperties.getBoolean("config.disable_media", false);
@@ -933,4 +936,12 @@ public final class SystemServer {
                     reportWtf("starting MediaRouterService", e);
                 }
 
+                try {
+                    Slog.i(TAG, "Abs Service");
+                    absService = new AbsService(context);
+                    ServiceManager.addService(Context.ABS_SERVICE, absService);
+                } catch (Throwable e) {
+                    reportWtf("starting abs Service", e);
+                }
+
                mSystemServiceManager.startService(TrustManagerService.class);

                mSystemServiceManager.startService(FingerprintService.class);

